# method to use, i.e. 'ldap' or 'jdbc' -- this doesn't work as yet.
# you either need to:
# a) add a system property on webapp startup, e.g. -Dsecurity.method=ldap
# b) specify the security-config.xml file explicitly in the applicationContext.xml
security.method:jdbc

############# LDAP #############

# ldap-specific properties. No need to set these for JDBC security connections 
security.ldap.url:ldap://you.ldap.server:389/dc=server,dc=ldap,dc=your
security.ldap.userDn:cn=root,dc=server,dc=ldap,dc=your
security.ldap.password:your_ldap_pass

# DefaultLdapUsernameToDnMapper constructor args
security.ldap.userDnBase:ou=Users
security.ldap.usernameAttribute:uid

# FilterBasedLdapUserSearch constructor args
security.ldap.searchBase:
security.ldap.searchFilter:(uid={0})

# DefaultLdapAuthoritiesPopulator args
security.ldap.groupSearchBase:ou=Groups
security.ldap.groupRoleAttribute:cn
security.ldap.groupSearchFilter:memberUid={0}
security.ldap.rolePrefix:ROLE_
security.ldap.searchSubtree:true
security.ldap.convertToUpperCase:true

############# JDBC ############# 

# jdbc-specific properties. No need to set these for LDAP security connections
security.jdbc.usersByUsernameQuery:SELECT loginName AS username, password AS password, active AS enabled, roles AS authority FROM User WHERE loginName=?
security.jdbc.authoritiesByUsernameQuery:SELECT loginName AS username, roles AS authority, admin, internal, external FROM User WHERE loginName=?
security.jdbc.rolePrefix:ROLE_
security.jdbc.enableAuthorities:true
