package com.eaglegenomics.simlims.core.store;

import java.io.IOException;
import java.util.Collection;
import java.util.Map;

import com.eaglegenomics.simlims.core.Activity;
import com.eaglegenomics.simlims.core.ActivityData;
import com.eaglegenomics.simlims.core.Request;
import com.eaglegenomics.simlims.core.User;

/**
 * Copyright (C) 2009 The Genome Analysis Center, Norwich, UK.
 * <p>
 * This interface defines the behaviour required of a store for keeping Protocol
 * data. Implementations of this interface may choose to use files or databases,
 * but they must all be fully transactional and recoverable.
 * <p>
 * Note that the store provides no methods for directly deleting data. This
 * helps prevent accidental data loss and assists validation.
 * <p>
 * All methods throw IOExceptions in case of problems with the backing store. In
 * the case of databases, SQLExceptions are wrapped into IOExceptions. For those
 * methods which throw SecurityException, this refers to users attempting to
 * access data on which they do not have the rights to perform the requested
 * action.
 * 
 * @author Richard Holland
 * @since 0.0.1
 */
public interface ProtocolStore {

	/**
	 * When generating output, Activity instances specify an activity alias
	 * which that output should be fed to as input. If the output is a result
	 * and is not for feeding into another activity as input, then the alias
	 * used should be this constant.
	 */
	public static final String RESULT_ACTIVITY_ALIAS = "__RESULT__";

	public Collection<ActivityData> getLockableInputData(User user,
			Activity activity) throws IOException;

	/**
	 * @return true if the lock succeeded, false if it didn't.
	 */
	public boolean lockInputData(User user, ActivityData input)
			throws SecurityException, IOException;

	public void unlockInputData(User user, ActivityData input)
			throws SecurityException, IOException;

	/**
	 * For indicating which inputs caused exceptions to be thrown, and so could
	 * not be processed.
	 */
	public void saveFailedData(User user, ActivityData input, Throwable error)
			throws SecurityException, IOException;

	/**
	 * Saves output data.
	 * 
	 * @param user
	 *            the user saving the data.
	 * @param inputDataEntities
	 *            the collection of ActivityData entries from the input to the
	 *            activity that are referred to in this set of output. The same
	 *            ActivityData entry can appear in multiple sets of output.
	 * @param outputDataEntities
	 *            the collection of ActivityData entries generated by the
	 *            activity that are referred to in this set of output. The same
	 *            ActivityData entry can appear in multiple sets of output.
	 * @param outputData
	 *            a map indicating which ActivityData.Entry objects in the input
	 *            map to which ActivityData.Entry objects in the output. The
	 *            keys of the map are input, the values are output. Both key and
	 *            value are split into pairs where the key (a String) is the
	 *            index (use ActivityData.NO_INDEX for unindexed data) and the
	 *            value is the ActivityData the index refers to.
	 */
	public void saveOutputData(
			User user,
			Collection<ActivityData> inputDataEntities,
			Collection<ActivityData> outputDataEntities,
			Map<Map.Entry<String, ActivityData>, Collection<Map.Entry<String, ActivityData>>> outputData)
			throws SecurityException, IOException;

	/**
	 * For indicating which input were seen, deemed unimportant, and produced no
	 * output. This is not the same as indicating input which was seen but
	 * should be left on the queue for processing later.
	 */
	public void saveSkippedData(User user, ActivityData input)
			throws SecurityException, IOException;

	/**
	 * Check that the user still holds the lock.
	 * 
	 * @param user
	 *            the user holding the lock.
	 * @param input
	 *            the input to check.
	 * @return true if the user holds the lock and the lock is still in place.
	 *         False if the lock has expired or the user does not own it.
	 */
	public boolean validateInputDataLock(User user, ActivityData input)
			throws IOException;

	/**
	 * @return the results, or an empty set if it has not finished.
	 */
	public Collection<ActivityData> getRequestResults(User user,
			Request request, int executionCount) throws SecurityException,
			IOException;

	public boolean isCurrentExecutionComplete(User user, Request request)
			throws SecurityException, IOException;

	public void queueNewInputData(ActivityData inputData) throws IOException;
}
